{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","ReorderGoods","goods","reverse","type","initialGoods","sort","a","b","localeCompare","length","App","useState","useType","useReverse","ChangeType","typeNum","ChangeReverse","reverseType","className","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"uOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAQF,SAASC,EAAaC,EAAtB,GAA2E,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,KAC1CC,EAAY,YAAOH,GAEzB,OAAQE,GACN,KAAK,EACHC,EAAaC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MAEF,KAAK,EACHH,EAAaC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEG,OAASF,EAAEE,UAW7C,OAJIP,GACFE,EAAaF,UAGRE,EAGF,IAAMM,EAAgB,WAC3B,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,oBAAS,GAAvC,mBAAOT,EAAP,KAAgBW,EAAhB,KAEA,SAASC,EAAWC,GAClBH,EAAQG,GAGV,SAASC,EAAcC,GACrBJ,EAAWI,GAGb,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEf,KAAK,SACLe,UAAS,yBAA6B,IAATf,EAAa,WAAa,IACvDgB,QAAS,kBAAML,EAAW,IAH5B,iCAQA,wBACEX,KAAK,SACLe,UAAS,4BAAgC,IAATf,EAAa,WAAa,IAC1DgB,QAAS,kBAAML,EAAW,IAH5B,4BAQA,wBACEX,KAAK,SACLe,UAAS,4BAAwBhB,EAAuB,GAAb,YAC3CiB,QAAS,kBAAMH,GAAed,IAHhC,sBAQEA,GAAoB,IAATC,IACX,wBACEA,KAAK,SACLe,UAAU,4BACVC,QAAS,WACPH,GAAc,GACdF,EAAW,IALf,sBAaJ,6BACGd,EAAaD,EAAiB,CAAEG,UAASC,SAAQiB,KAAI,SAAAC,GAAI,OACxD,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCjGnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.10d579c7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype ReorderOptions = {\n  reverse: boolean,\n  type: number,\n};\n\nfunction ReorderGoods(goods: string[], { reverse, type }: ReorderOptions) {\n  const initialGoods = [...goods];\n\n  switch (type) {\n    case 1:\n      initialGoods.sort((a, b) => a.localeCompare(b));\n      break;\n\n    case 2:\n      initialGoods.sort((a, b) => a.length - b.length);\n      break;\n\n    default:\n      break;\n  }\n\n  if (reverse) {\n    initialGoods.reverse();\n  }\n\n  return initialGoods;\n}\n\nexport const App: React.FC = () => {\n  const [type, useType] = useState(0);\n  const [reverse, useReverse] = useState(false);\n\n  function ChangeType(typeNum: number) {\n    useType(typeNum);\n  }\n\n  function ChangeReverse(reverseType: boolean) {\n    useReverse(reverseType);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${type !== 1 ? 'is-light' : ''}`}\n          onClick={() => ChangeType(1)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${type !== 2 ? 'is-light' : ''}`}\n          onClick={() => ChangeType(2)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${!reverse ? 'is-light' : ''}`}\n          onClick={() => ChangeReverse(!reverse)}\n        >\n          Reverse\n        </button>\n\n        {(reverse || type !== 0) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              ChangeReverse(false);\n              ChangeType(0);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {ReorderGoods(goodsFromServer, { reverse, type }).map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}